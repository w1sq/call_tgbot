import datetime
import typing
import aiofiles
import aiogram
from config import Config
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from db.storage import UserStorage, User
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import aioschedule


class GetAnswer(StatesGroup):
    answer_paid_id = State()
    answer_limit = State()
    answer_unpaid_id = State()
    phone_number = State()


class TG_Bot():
    def __init__(self, user_storage: UserStorage):
        self._user_storage:UserStorage = user_storage
        self._bot:aiogram.Bot = aiogram.Bot(token=Config.TGBOT_API_KEY)
        self._storage:MemoryStorage = MemoryStorage()
        self._dispatcher:aiogram.Dispatcher = aiogram.Dispatcher(self._bot, storage=self._storage)
        self.patterns = ['–û—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤']
    
    async def start(self):
        print('Bot has started')
        await self._dispatcher.start_polling()
    
    def init(self) :
        aioschedule.every().minute.do(self._check_subscriptions)
        self._init_handler()
    
    def _generate_back_keyb(self):
        return InlineKeyboardMarkup().add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='cancel'))

    def _generate_pattern_keyb(self):
        pattern_keyb = InlineKeyboardMarkup()
        for id in range(len(self.patterns)):
            pattern_keyb.add(InlineKeyboardButton(text=str(id+1)+'. '+self.patterns[id], callback_data='send_request '+str(id)))
        pattern_keyb.add(InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞',callback_data='cancel'))
        return pattern_keyb

    def _generate_menu_keyb(self, user:User):
        match user.role:
            case User.USER:
                return ReplyKeyboardMarkup(resize_keyboard=True)\
                    .row(KeyboardButton('üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç'))
            case User.PAID:
                return ReplyKeyboardMarkup(resize_keyboard=True)\
                    .row(KeyboardButton('üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å'), KeyboardButton('üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç'))
            case User.ADMIN:
                return ReplyKeyboardMarkup(resize_keyboard=True)\
                    .row(KeyboardButton('üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å'), KeyboardButton('üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç'))\
                        .row(KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'), KeyboardButton('–£–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'))\
                            .row(KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —à–∞–±–ª–æ–Ω"))

    async def _show_menu(self, message:aiogram.types.Message , user:User):
        local_keyb = self._generate_menu_keyb(user)
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', reply_markup=local_keyb)

    async def _get_profile_info(self, message:aiogram.types.Message, user:User):
        answer_text = f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n‚îú ID: `{user.id}`\n‚îú –í–∞—à –Ω–∏–∫–Ω–µ–π–º: `{message['from']['username']}`\n‚îú –í–∞—à–µ –∏–º—è: `{message['from']['first_name']}`"
        match user.role:
            case User.USER:
                answer_text += f"\n‚îú –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç"
            case User.PAID:
                answer_text += f"\n‚îú –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {user.expire_date.strftime('%d-%m-%Y')}\n‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤: {user.calls}"
        await message.answer(answer_text, parse_mode=aiogram.types.ParseMode.MARKDOWN)

    async def _make_call(self, message:aiogram.types.Message, user:User):
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7999 –∏–ª–∏ 8999', reply_markup=self._generate_back_keyb())
        await GetAnswer.phone_number.set()

    async def _choose_pattern(self, message:aiogram.types.Message, state:aiogram.dispatcher.FSMContext):
        user = await self._user_storage.get_by_id(message.chat.id)
        if user and (user.role == User.ADMIN or user.role == User.PAID and user.calls>0) and (message.text.isdigit() and len(message.text) == 11 or message.text[1:].isdigit() and len(message.text) == 12):
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:', reply_markup=self._generate_pattern_keyb())
            await state.update_data(number=message.text)
        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', reply_markup=self._generate_back_keyb())

    async def _send_request(self, call:aiogram.types.CallbackQuery):
        pattern_id = int(call.data.split()[1])
        state = self._dispatcher.current_state()
        state_data = await state.get_data()
        await state.finish()
        await call.message.answer(f'–ü—Ä–æ–±—É—é –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä {state_data["number"]} —Å —à–∞–±–ª–æ–Ω–æ–º {self.patterns[pattern_id]}')

    async def _ask_unpaid_id(self, message:aiogram.types.Message, user:User):
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø, –û–¢–ú–ï–ù–ê –¥–ª—è –æ—Ç–º–µ–Ω—ã')
        await GetAnswer.answer_unpaid_id.set()

    async def _set_unpaid_id(self, message:aiogram.types.Message, state:aiogram.dispatcher.FSMContext):
        if message.text == "–û–¢–ú–ï–ù–ê":
            await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ')
        elif message.text.isdigit():
            db_user = await self._user_storage.get_by_id(int(message.text))
            if db_user is not None:
                if db_user.role == User.BLOCKED:
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
                if db_user.role == User.PAID:
                    await self._user_storage.remove_paid(db_user)
                    local_keyb = self._generate_menu_keyb(db_user)
                    await self._bot.send_message(chat_id=db_user.id, text="–í–∞—à –¥–æ—Å—Ç—É–ø –±—ã–ª –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω.", reply_markup=local_keyb)
                    await message.answer('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏')
                else:
                    await message.answer('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∞–∫ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏')
            else:
                await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        else:
            await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        await state.finish()

    async def _ask_paid_id(self, message:aiogram.types.Message, user:User):
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –æ–ø–ª–∞—Ç–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –û–¢–ú–ï–ù–ê –¥–ª—è –æ—Ç–º–µ–Ω—ã')
        await GetAnswer.answer_paid_id.set()
    
    async def _set_paid_id(self, message:aiogram.types.Message, state:aiogram.dispatcher.FSMContext):
        if message.text == "–û–¢–ú–ï–ù–ê":
            await message.answer('–£—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
        elif message.text.isdigit():
            db_user = await self._user_storage.get_by_id(int(message.text))
            if db_user is not None:
                if db_user.role == User.BLOCKED:
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
                if db_user.role != User.PAID:
                    await self._user_storage.add_paid(db_user)
                    local_keyb = ReplyKeyboardMarkup(resize_keyboard=True).row(KeyboardButton('üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å'), KeyboardButton('üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç'))
                    await self._bot.send_message(chat_id=db_user.id, text="–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞", reply_markup=local_keyb)
                    # await self._bot.send_message(chat_id=Config.admins_chat_id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {db_user.id} –±—ã–ª –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å ID {message.chat.id}.')
                    await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω')
                else:
                    await message.answer('–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∞–∫ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞')
            else:
                await message.answer('–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        else:
            await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        await state.finish()

    # async def _access_users_list(self, message:aiogram.types.Message, user:User):
    #     users = await self._user_storage.get_role_list(User.PAID)
    #     if users is None or len(users) == 0:
    #         await message.answer('–õ—é–¥–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–µ—Ç')
    #     else:
    #         users = map(lambda x:str(x), users)
    #         async with aiofiles.open('paid_users.txt', 'w') as f:
    #             await f.write("\n".join(users))
    #         async with aiofiles.open('paid_users.txt', 'rb') as f:
    #             await message.answer_document(f)

    async def _users_amount(self, message:aiogram.types.Message, user:User):
        users = await self._user_storage.get_user_amount()
        await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}')

    # async def _increase_limits(self, message:aiogram.types.Message, user:User):
    #     await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –µ–≥–æ –ª–∏–º–∏—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
    #     await GetAnswer.answer_limit.set()
    
    # async def _update_user_limit(self, message:aiogram.types.Message, state:aiogram.dispatcher.FSMContext):
    #     user_id, limit_delta = map(lambda x: int(x), message.text.split())
    #     user = await self._user_storage.get_by_id(user_id)
    #     if user is None:
    #         await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω')
    #     elif user.role == User.BLOCKED:
    #         await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –≤—ã–¥–∞—á–∞ –ª–∏–º–∏—Ç–æ–≤ –µ–º—É –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞')
    #     else:
    #         await self._user_storage.change_phrase_limit(user, limit_delta)
    #         await message.answer(f'–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {limit_delta}')
    #     await state.finish()

    # async def _promote_to_admin(self, message:aiogram.types.Message, user:User):
    #     admin_id = message.text.split()[1]
    #     user = await self._user_storage.get_by_id(int(admin_id))
    #     if user is not None:
    #         if user.role in (User.ADMIN, User.BLOCKED):
    #             match user.role:
    #                 case User.ADMIN:
    #                     await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω')
    #                 case User.BLOCKED:
    #                     await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
    #         else:
    #             await self._user_storage.promote_to_admin(int(admin_id))
    #             await message.answer(f'–†–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ id {admin_id}')
    #     else:
    #         await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    
    # async def _demote_from_admin(self, message:aiogram.types.Message, user:User):
    #     admin_id = message.text.split()[1]
    #     user = await self._user_storage.get_by_id(int(admin_id))
    #     if user is not None:
    #         if user.role == User.ADMIN:
    #             await self._user_storage.demote_from_admin(int(admin_id))
    #             await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.')
    #         else:
    #             await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –∏ —Ç–∞–∫ –Ω–µ –∞–¥–º–∏–Ω.')
    #     else:
    #         await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

    # async def _ban_user(self, message:aiogram.types.Message, user:User):
    #     user_id = message.text.split()[1]
    #     user = await self._user_storage.get_by_id(int(user_id))
    #     if user is not None:
    #         if user.role != User.BLOCKED:
    #             await self._user_storage.ban_user(int(user_id))
    #             await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
    #             await self._bot.send_message(chat_id=user_id, text='–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
    #         else:
    #             await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
    #     else:
    #         await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    
    # async def _unban_user(self, message:aiogram.types.Message, user:User):
    #     user_id = message.text.split()[1]
    #     user = await self._user_storage.get_by_id(int(user_id))
    #     if user is not None:
    #         if user.role == User.BLOCKED:
    #             await self._user_storage.unban_user(int(user_id))
    #             await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')
    #             await self._bot.send_message(chat_id=user_id, text='–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')
    #         else:
    #             await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏ —Ç–∞–∫ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.')
    #     else:
    #         await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

    def _init_handler(self):
        self._dispatcher.register_callback_query_handler(self._send_request, aiogram.dispatcher.filters.Text(startswith="send_request "), state="*")
        # self._dispatcher.register_callback_query_handler(self._deny_payment, aiogram.dispatcher.filters.Text(startswith="deny "))
        # self._dispatcher.register_callback_query_handler(self._approve_payment, aiogram.dispatcher.filters.Text(startswith="approve "))
        # self._dispatcher.register_message_handler(self._user_middleware(self._god_required(self._ban_user)), commands=['ban'])
        # self._dispatcher.register_message_handler(self._user_middleware(self._god_required(self._unban_user)), commands=['unban'])
        # self._dispatcher.register_message_handler(self._user_middleware(self._god_required(self._demote_from_admin)), commands=['remove_admin'])
        # self._dispatcher.register_message_handler(self._user_middleware(self._god_required(self._promote_to_admin)), commands=['add_admin'])
        # self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._add_phrase)), commands=['phrase'])
        # self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._add_phrases)), commands=['phrases'])
        # self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._phrases_amount)), commands=['phrase_amount'])
        self._dispatcher.register_message_handler(self._user_middleware(self._show_menu), commands=['start', 'menu'])
        # self._dispatcher.register_message_handler(self._user_middleware(self._show_menu), text='‚ÜòÔ∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
        # self._dispatcher.register_message_handler(self._user_middleware(self._worked_out_reviews), text='‚úÖ –Ø –∏–∑—É—á–∏–ª –æ—Ç–∑—ã–≤—ã')
        # self._dispatcher.register_message_handler(self._user_middleware(self._will_think), text='‚ÜòÔ∏è –ï—â—ë –ø–æ–¥—É–º–∞—é')
        # self._dispatcher.register_message_handler(self._user_middleware(self._show_menu), text='–ú–µ–Ω—é')
        # self._dispatcher.register_message_handler(self._user_middleware(self._check_subscription), text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
        # self._dispatcher.register_message_handler(self._user_middleware(self._start_education), text='‚ú®–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ')
        # self._dispatcher.register_message_handler(self._user_middleware(self._start_education), text='‚úíÔ∏è –û–±—É—á–µ–Ω–∏–µ')
        # self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._start_paid_education)), text='‚úíÔ∏è –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ')
        # self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._step1_paid_education)), text='WINDOWS')
        # self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._step2_paid_education)), text='‚§µÔ∏è –Ø —Å–∫–∞—á–∞–ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª Python')
        # self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._step3_paid_education)), text='‚§µÔ∏è –Ø —Å–∫–∞—á–∞–ª –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–ª –±–∏–±–ª–∏–æ—Ç–µ–∫—É')
        # self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._step4_paid_education)), text='‚§µÔ∏è –Ø —Å–∫–∞—á–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º—É')
        # self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._step5_paid_education)), text='‚§µÔ∏è –Ø —Å–∫–∞—á–∞–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
        # self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._step6_paid_education)), text='‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ')
        # self._dispatcher.register_message_handler(self._user_middleware(self._step2_education), text='‚§µÔ∏è –®–∞–≥ 1')
        # self._dispatcher.register_message_handler(self._user_middleware(self._step3_education), text='‚§µÔ∏è –Ø —Å–æ–∑–¥–∞–ª –∫–æ—à–µ–ª—ë–∫')
        # self._dispatcher.register_message_handler(self._user_middleware(self._step4_education), text='‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É')
        # self._dispatcher.register_message_handler(self._user_middleware(self._step5_education), text='‚úÖ –ì–æ—Ç–æ–≤–æ')
        # self._dispatcher.register_message_handler(self._user_middleware(self._get_support_info), text='‚ÑπÔ∏è –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è')
        # self._dispatcher.register_message_handler(self._user_middleware(self._get_support_info), text='‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
        self._dispatcher.register_message_handler(self._user_middleware(self._get_profile_info), text='üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç')
        self._dispatcher.register_message_handler(self._user_middleware(self._make_call), text='üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å')
        self._dispatcher.register_message_handler(self._choose_pattern, state=GetAnswer.phone_number)
        # self._dispatcher.register_message_handler(self._user_middleware(self._get_qa_info), text='‚ùìÔ∏è –í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç')
        # self._dispatcher.register_message_handler(self._user_middleware(self._generate_phrase), aiogram.dispatcher.filters.Text(startswith="‚ú® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É "))
        # self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._switch_to_admin_panel)), text='‚ÜïÔ∏è –ê–¥–º–∏–Ω–∫–∞')
        self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._ask_paid_id)), text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
        self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._ask_unpaid_id)), text='–£–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
        # self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._access_users_list)), text='–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤')
        self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._users_amount)), commands=['users'])
        # self._dispatcher.register_message_handler(self._user_middleware(self._admin_required(self._increase_limits)), text='–£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç—ã')
        self._dispatcher.register_message_handler(self._set_paid_id, state=GetAnswer.answer_paid_id)
        # self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._buy_db)), text='‚úÖ –î–æ–∫—É–ø–∏—Ç—å –ë–î')
        # self._dispatcher.register_message_handler(self._user_middleware(self._buy_program), text='‚úÖ –ö—É–ø–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É')
        # self._dispatcher.register_message_handler(self._user_middleware(self._how_much), text='‚ùì –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?')
        # self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._download_program)), text='‚ÜôÔ∏è –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É')
        self._dispatcher.register_message_handler(self._set_unpaid_id, state=GetAnswer.answer_unpaid_id)
        # self._dispatcher.register_message_handler(self._update_user_limit, state=GetAnswer.answer_limit)
        # self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._send_win_tutorial)), text='Windows')
        # self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._send_macos_tutorial)), text='MacOS')
        # self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._send_android_tutorial)), text='Android')
        # self._dispatcher.register_message_handler(self._user_middleware(self._paid_required(self._send_ios_tutorial)), text='IOS')
        self._dispatcher.register_callback_query_handler(self._cancel_handler, aiogram.dispatcher.filters.Text(startswith="cancel"), state="*")
    
    async def _cancel_handler(self, call: aiogram.types.CallbackQuery, state: aiogram.dispatcher.FSMContext):
        current_state = await state.get_state()
        if current_state is not None:
            await state.finish()
        await self._show_menu(call.message, await self._user_storage.get_by_id(call.message.chat.id))

    def _user_middleware(self, func:typing.Callable) -> typing.Callable:
        async def wrapper(message:aiogram.types.Message, *args, **kwargs):
            user = await self._user_storage.get_by_id(message.chat.id)
            if user is None:
                # split_message = message.text.split()
                # if len(split_message) == 2 and split_message[1].isdigit() and await self._user_storage.get_by_id(int(split_message[1])):
                #     inviter_id = int(split_message[1])
                #     await self._user_storage.give_referal(inviter_id)
                #     inviter_user = self._user_storage.get_by_id(inviter_id)
                #     local_keyb = self._generate_menu_keyb(inviter_user)
                #     await self._bot.send_message(chat_id=inviter_id, text='‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞.\n\n–ö–∞–∫ –∏ –æ–±–µ—â–∞–ª–∏ - –∑–∞—á–∏—Å–ª–∏–ª–∏ —Ç–µ–±–µ 30 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!', reply_markup = local_keyb)
                user = User(
                    id = message.chat.id,
                    role = User.USER
                )
                # users = await self._user_storage.get_user_amount()
                # if int(users) % 100 == 0:
                #     await self._bot.send_message(chat_id=Config.admins_chat_id, text=f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ –¥–æ—Å—Ç–∏–≥–ª–æ {int(users)}')
                await self._user_storage.create(user)
            elif user.role == User.BLOCKED:
                return wrapper
            await func(message, user)
        return wrapper
    
    async def _check_subscriptions(self):
        users = await self._user_storage.get_all_members()
        now = datetime.datetime.now()
        for user in users:
            if user.expire_date and user.expire_date < now and user.role in (User.PAID):
                # match user.role:
                #     case User.PAID:
                #         reply_markup = self._buy_inline_markup
                #     case User.PROF_LIMIT:
                #         reply_markup = self._continue_buy_inline_markup
                await self._user_storage.make_unpaid(user)
                await self._bot.send_message(user.id, "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å")

    def _admin_required(self, func:typing.Callable) -> typing.Callable:
        async def wrapper(message:aiogram.types.Message, user:User, *args, **kwargs):
            if user.role == User.ADMIN:
                await func(message, user)
        return wrapper
    
    def _paid_required(self, func:typing.Callable) -> typing.Callable:
        async def wrapper(message:aiogram.types.Message, user:User, *args, **kwargs):
            if user.role in (User.PAID, User.ADMIN) or user.id in Config.gods:
                await func(message, user)
        return wrapper

    def _god_required(self, func:typing.Callable) -> typing.Callable:
        async def wrapper(message:aiogram.types.Message, user:User, *args, **kwargs):
            if user.id in Config.gods:
                await func(message, user)
        return wrapper
